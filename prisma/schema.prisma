// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  uid                      Int                        @id @default(autoincrement())
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @default(now())
  isDeleted                Boolean                    @default(false)
  email                    String                     @unique
  password                 String
  name                     String
  isValid                  Boolean                    @default(false)
  nickname                 String?
  status                   Status?
  token                    String?
  rank                     Rank                       @default(PV)
  division                 Int?
  brigade                  Int?
  DivisionCommunityPost    DivisionCommunityPost[]
  DivisionCommunityComment DivisionCommunityComment[]
  DivisionFacility         DivisionFacility[]
  DivisionRating           DivisionRating[]
  Question                 Question[]
  Answer                   Answer[]
}

model Division {
  uid                   Int                     @id @default(autoincrement())
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @default(now())
  isDeleted             Boolean                 @default(false)
  name                  String
  nickname              String?
  rating                Float?
  preRank               Int?
  province              String?
  county                String?
  address               String?
  brigade               String?
  pxRating              Float?
  dormitoryRating       Float?
  showerRating          Float?
  mealRating            Float?
  locationRating        Float?
  phoneNumber           Float?
  DivisionCommunityPost DivisionCommunityPost[]
  DivisionFacility      DivisionFacility[]
  DivisionRating        DivisionRating[]
}

model DivisionCommunityPost {
  uid                      Int                        @id @default(autoincrement())
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @default(now())
  isDeleted                Boolean                    @default(false)
  div                      Division?                  @relation(fields: [divUid], references: [uid])
  divUid                   Int?
  user                     User?                      @relation(fields: [userUid], references: [uid])
  userUid                  Int?
  views                    Int
  title                    String
  content                  String
  DivisionCommunityComment DivisionCommunityComment[]
}

model DivisionCommunityComment {
  uid       Int                    @id @default(autoincrement())
  createdAt DateTime               @default(now())
  updatedAt DateTime               @default(now())
  isDeleted Boolean                @default(false)
  post      DivisionCommunityPost? @relation(fields: [postUid], references: [uid])
  postUid   Int?
  user      User?                  @relation(fields: [userUid], references: [uid])
  userUid   Int?
  title     String
  content   String
}

model DivisionFacility {
  uid         Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  isDeleted   Boolean   @default(false)
  user        User?     @relation(fields: [userUid], references: [uid])
  userUid     Int?
  div         Division? @relation(fields: [divUid], references: [uid])
  divUid      Int?
  type        String?
  name        String
  phoneNumber String?
  address     String?
  imageUrl    String?
  content     String?
  province    String?
  county      String?
  price       String?
  information String?
  views       Int
}

model DivisionRating {
  uid       Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  isDeleted Boolean   @default(false)
  div       Division? @relation(fields: [divUid], references: [uid])
  divUid    Int?
  user      User?     @relation(fields: [userUid], references: [uid])
  userUid   Int?
  rating    Float?
  dormitory Int?
  shower    Int?
  location  Int?
  meal      Int?
  px        Int?
  comment   String?
  pros      String?
  cons      String?
  content   String?
}

model Question {
  uid       Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  isDeleted Boolean  @default(false)
  user      User?    @relation(fields: [userUid], references: [uid])
  userUid   Int?
  title     String
  content   String
  views     Int
  Answer    Answer[]
}

model Answer {
  uid         Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  isDeleted   Boolean   @default(false)
  question    Question? @relation(fields: [questionUid], references: [uid])
  questionUid Int?
  user        User?     @relation(fields: [userUid], references: [uid])
  userUid     Int?
  title       String
  content     String
}

model Like {
  uid       Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  isDeleted Boolean  @default(false)
  targetUid Int
  type      Type
  userUid   Int
  writerUid Int
}

enum Status {
  ACTIVE
  RESERVE
}

enum Type {
  QUESTION
  ANSWER
  COMMUNITY_POST
  COMMUNITY_COMMENT
  FACILITY
  RATING
}

enum Rank {
  PV //  이등병
  PV1 //  일병  
  CORP //  상병
  SERG //  병장
  SSERG //  하사
  SERG1 //  중사
  FSERG //  상사
  CSG //  원사
  WO //  준위
  SL //  소위
  FL //  중위
  CAPT //  대위
  MAJ //  소령
  LC //  중령
  COL //  대령
  BG //  준장
  MG //  소장
  LG //  중장
  GEN //  대장
}
